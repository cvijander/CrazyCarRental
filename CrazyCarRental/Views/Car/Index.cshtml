
   
   @model CrazyCarRental.Models.PaginatedCarsViewModel

@{
    ViewData["Title"] = "View a list of Cars";
}

    <h1>Available cars</h1>

    <form asp-action="Index" method="get" class="search-form">
        <label for="make">Make:</label>
        <input type="text" name="make" id="make" value="@Context.Request.Query["make"]"/>

        <label for="model">Model:</label>
        <input type="text" name="model" id="model" value="@Context.Request.Query["model"]"/>

        <label for="minPrice">Min Price:</label>
        <input type="number" name="minPrice" id="minPrice" step="0.01" value="@Context.Request.Query["minPrice"]"/>

        <label for="maxPrice">Max price</label>
        <input type="number" name="maxPrice" id="maxPrice" step="0.01" value="@Context.Request.Query["maxPrice"]"/>

        <input type="hidden" name="pageCount" id="pageCount" value="@Context.Request.Query["pageCount"]"/>
        <input type="hidden" name="pageSize" id="pageSize" value="@Context.Request.Query["pageSize"]"/>
            
        
        <button type="submit" class="btn btn-primary" >Search </button>
        
    </form>

<div>
    @foreach (var car in Model.Cars)
    {
        @await Html.PartialAsync("_CarCard", car)
    }
</div>



   @*   <div>
            @foreach (Car car in Model)
            {
               <div class="car-card">
                   <h2>@car.Make  @car.Model</h2>
                   <p>Price per day : @car.PricePerDay euro </p>
                   <p>@(car.IsAvailable ? "Available" : "Not Available")</p>
                   <a href="@Url.Action("Details", "Car",new {id = car.CarId })">View Details</a>             
               </div>
            }
       </div> *@

       <div>
           <input type="hidden" name="pageCount" id="pageCount" value="@Context.Request.Query["pageCount"]" />
           @if(Model.HasNextPage)
           {
             <a href="@Url.Action("Index","Car", new {  page = (Model.CurrentPage + 1).ToString() })">Next</a>
           }
            
           <input type="hidden" name="pageSize" id="pageSize" value="@Context.Request.Query["pageSize"]" />
            @if (Model.HasPreviousPage)
            {
                <a href="@Url.Action("Index","Car", new {  page = (Model.CurrentPage -1).ToString() })">Previous</a>
            }
           
       </div>
       @* zavrsti se kroz for petlju od 1 do total pages i pokazi mi sve linkove, a na onoj stranici koja je trenutna da ne bude link, nego samo tekst da bi bilo user frindel  *@
       @* if link = current page  nemoj da mi furas link *@




<style>
    .car-card {
        border: 1px solid #ddd;
        padding:15px;
        margin:10px 0;
        background-color: #f9f9f9;
    }
</style>